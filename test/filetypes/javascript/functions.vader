# ==============================================================================
# Functions without parameters.
# ==============================================================================
Given javascript (function without parameters):
  function myFunc(/* inline comment */) {}

Do (trigger doge):
  \<C-d>

Expect javascript (generated comment with @description tag):
  /**
   * @description TODO
   */
  function myFunc(/* inline comment */) {}

# ==============================================================================
# Functions with parameters without type hints.
# ==============================================================================
Given javascript (function with parameters without type hints):
  function myFunc($p1 = 'value', p2 = [], p3, p4 /* inline comment */) {}

Do (trigger doge):
  \<C-d>

Expect javascript (generated comment with @description and @param tags):
  /**
   * @description TODO
   * @param {*} $p1 TODO
   * @param {*} p2 TODO
   * @param {*} p3 TODO
   * @param {*} p4 TODO
   */
  function myFunc($p1 = 'value', p2 = [], p3, p4 /* inline comment */) {}

# ==============================================================================
# Functions with parameters with type hints.
# ==============================================================================
Given javascript (function with parameters with type hints):
  function myFunc($p1: string = 'value', p2: string[] = [], p3: number, p4: float): string[]  {}

Do (trigger doge):
  \<C-d>

Expect javascript (generated comment with @description, @param and @return tags):
  /**
   * @description TODO
   * @param {string} $p1 TODO
   * @param {string[]} p2 TODO
   * @param {number} p3 TODO
   * @param {float} p4 TODO
   * @return {string[]} TODO
   */
  function myFunc($p1: string = 'value', p2: string[] = [], p3: number, p4: float): string[]  {}

# ==============================================================================
# Functions as variables with parameters without type hints.
# ==============================================================================
Given javascript (function as variable with parameters without type hints):
  var myFunc = function($p1 = 'value', p2 = [], p3, p4) {}

Do (trigger doge):
  \<C-d>

Expect javascript (generated comment with @description, @functon and @param tags):
  /**
   * @description TODO
   * @function myFunc
   * @param {*} $p1 TODO
   * @param {*} p2 TODO
   * @param {*} p3 TODO
   * @param {*} p4 TODO
   */
  var myFunc = function($p1 = 'value', p2 = [], p3, p4) {}

# ==============================================================================
# Functions as variables with parameters with type hints.
# ==============================================================================
Given javascript (function as variable with parameters with type hints):
  var myFunc = function($p1: string = 'value', p2: string[] = [], p3: number, p4: float): string[]  {}

Do (trigger doge):
  \<C-d>

Expect javascript (generated comment with @description, @function and @param tags):
  /**
   * @description TODO
   * @function myFunc
   * @param {string} $p1 TODO
   * @param {string[]} p2 TODO
   * @param {number} p3 TODO
   * @param {float} p4 TODO
   * @return {string[]} TODO
   */
  var myFunc = function($p1: string = 'value', p2: string[] = [], p3: number, p4: float): string[]  {}

# ==============================================================================
# Functions that should be ignored by DoGe.
# ==============================================================================
Given javascript (function that should be ignored):
  var myObj = {
    /* This function should be ignored by DoGe */
    myFunc: function() {
      /* This function should be ignored by DoGe */
      return function() {
        //
      }
    },
  };

Do (trigger doge):
  :3\<CR>
  \<C-d>
  :5\<CR>
  \<C-d>

Expect javascript (no changes):
  var myObj = {
    /* This function should be ignored by DoGe */
    myFunc: function() {
      /* This function should be ignored by DoGe */
      return function() {
        //
      }
    },
  };

# ==============================================================================
# Prototype functions with parameters with type hints.
# ==============================================================================
Given javascript (prototype function with parameters with type hints):
  Person.prototype.greet = function (p1: string = 'default', p2: Immutable.List = Immutable.List()): string[] {};

Do (trigger doge):
  \<C-d>

Expect javascript (generated comment with @description, @function, @param and @return tags):
  /**
   * @description TODO
   * @function Person#greet
   * @param {string} p1 TODO
   * @param {Immutable.List} p2 TODO
   * @return {string[]} TODO
   */
  Person.prototype.greet = function (p1: string = 'default', p2: Immutable.List = Immutable.List()): string[] {};

# ==============================================================================
# Prototype functions without parameters without type hints.
# ==============================================================================
Given javascript (prototype function without parameters without type hints):
  Person.prototype.greet = function () {}

Do (trigger doge):
  \<C-d>

Expect javascript (generated comment with @description and @function tags):
  /**
   * @description TODO
   * @function Person#greet
   */
  Person.prototype.greet = function () {}

# ==============================================================================
# Functions with parameters with multiple type hints.
# ==============================================================================
Given javascript (function with parameters with multiple type hints):
  function myFunc($p1: string, p2: Foo | Bar | Baz): (Foo | Bar) {}

Do (trigger doge):
  \<C-d>

Expect javascript (generated comment with @description, @param and @return tags):
  /**
   * @description TODO
   * @param {string} $p1 TODO
   * @param {Foo|Bar|Baz} p2 TODO
   * @return {Foo|Bar} TODO
   */
  function myFunc($p1: string, p2: Foo | Bar | Baz): (Foo | Bar) {}

# ==============================================================================
# Async functions with parameters without typehints.
# ==============================================================================
Given javascript (async function with parameters without type hints):
  async function myFunc($p1 = 'value', p2 = [], p3, p4) {}

Do (trigger doge):
  \<C-d>

Expect javascript (generated comment with @description, @async, and @param tags):
  /**
   * @description TODO
   * @async
   * @param {*} $p1 TODO
   * @param {*} p2 TODO
   * @param {*} p3 TODO
   * @param {*} p4 TODO
   */
  async function myFunc($p1 = 'value', p2 = [], p3, p4) {}

# ==============================================================================
# Generator functions with parameters without typehints.
# ==============================================================================
Given javascript (generator function with parameters without type hints):
  function* myFunc($p1 = 'value', p2 = [], p3, p4) {}

Do (trigger doge):
  \<C-d>

Expect javascript (generated comment with @description and @param tags):
  /**
   * @description TODO
   * @param {*} $p1 TODO
   * @param {*} p2 TODO
   * @param {*} p3 TODO
   * @param {*} p4 TODO
   */
  function* myFunc($p1 = 'value', p2 = [], p3, p4) {}

# ==============================================================================
# Async generator functions with parameters without typehints.
# ==============================================================================
Given javascript (async generator function with parameters without type hints):
  async function* myFunc($p1 = 'value', p2 = [], p3, p4) {}

Do (trigger doge):
  \<C-d>

Expect javascript (generated comment with @description, @async, and @param tags):
  /**
   * @description TODO
   * @async
   * @param {*} $p1 TODO
   * @param {*} p2 TODO
   * @param {*} p3 TODO
   * @param {*} p4 TODO
   */
  async function* myFunc($p1 = 'value', p2 = [], p3, p4) {}
