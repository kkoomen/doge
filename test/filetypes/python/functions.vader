# ==============================================================================
# Functions without parameters.
# ==============================================================================
Given python (function without parameters):
  def myFunc(): # inline comment
    pass

Do (trigger doge):
  \<C-d>

Expect python (no changes):
  def myFunc(): # inline comment
    """
    TODO
    
    """
    pass

# ==============================================================================
# Functions without type hints.
# ==============================================================================
Given python (function without type hints):
  def myFunc(p1 = 'string', p2 = 5, p3, p4):
    pass

Do (trigger doge):
  \<C-d>

Expect python (generated comment with :param tags):
  def myFunc(p1 = 'string', p2 = 5, p3, p4):
    """
    TODO
    
    :param p1 any: TODO
    :param p2 any: TODO
    :param p3 any: TODO
    :param p4 any: TODO
    """
    pass

# ==============================================================================
# Functions with parameters.
# ==============================================================================
Given python (function with parameters):
  def myFunc(p1: str = 'string', p2: int = 5):
      pass

Do (trigger doge):
  \<C-d>

Expect python (generated comment with :param tags):
  def myFunc(p1: str = 'string', p2: int = 5):
      """
      TODO
      
      :param p1 str: TODO
      :param p2 int: TODO
      """
      pass

# ==============================================================================
# Functions with advanced type hint parameters.
# ==============================================================================
Given python (functions with advanced type hint parameters):
  def myFunc(p1: Callable[[int], None] = False, p2: Callable[[int, Exception], None] = {}) -> Sequence[T]:
      pass

  def myFunc(p1: Sequence[T]) -> Generator[int, float, str]:
      pass

Do (trigger doge):
  \<C-d>
  :11\<CR>
  \<C-d>

Expect python (generated comments with :param tags):
  def myFunc(p1: Callable[[int], None] = False, p2: Callable[[int, Exception], None] = {}) -> Sequence[T]:
      """
      TODO
      
      :param p1 Callable[[int], None]: TODO
      :param p2 Callable[[int, Exception], None]: TODO
      :rtype Sequence[T]: TODO
      """
      pass

  def myFunc(p1: Sequence[T]) -> Generator[int, float, str]:
      """
      TODO
      
      :param p1 Sequence[T]: TODO
      :rtype Generator[int, float, str]: TODO
      """
      pass

# ==============================================================================
# Functions using the Numpy doc standard.
# ==============================================================================
Given python(function without paramters without return type where b:doge_doc_standard='numpy'):
  def myFunc():
      pass


Do (trigger doge):
  :let b:doge_doc_standard='numpy'\<CR>
  \<C-d>

Expect python (generated comment with nothing but the text 'TODO'):
  def myFunc():
      """
      TODO
      
      TODO
      """
      pass

# ------------------------------------------------------------------------------

Given python(function with parameters without return type where b:doge_doc_standard='numpy'):
  def myFunc(p1: Callable[[int], None] = False, p2: Callable[[int, Exception], None] = {}):
      pass

Do (trigger doge):
  :let b:doge_doc_standard='numpy'\<CR>
  \<C-d>

Expect python (generated comment with :param tags):
  def myFunc(p1: Callable[[int], None] = False, p2: Callable[[int, Exception], None] = {}):
      """
      TODO
      
      TODO
      
      Parameters
      ----------
      p1 : Callable[[int], None]
          TODO
      p2 : Callable[[int, Exception], None]
          TODO
      """
      pass

# ------------------------------------------------------------------------------

Given python(function with parameters with return type where b:doge_doc_standard='numpy'):
  def myFunc(p1: Callable[[int], None] = False, p2: Callable[[int, Exception], None] = {}) -> Sequence[T]:
      pass

Do (trigger doge):
  :let b:doge_doc_standard='numpy'\<CR>
  \<C-d>

Expect python (generated comment with :param tags):
  def myFunc(p1: Callable[[int], None] = False, p2: Callable[[int, Exception], None] = {}) -> Sequence[T]:
      """
      TODO
      
      TODO
      
      Parameters
      ----------
      p1 : Callable[[int], None]
          TODO
      p2 : Callable[[int, Exception], None]
          TODO
      
      Returns
      -------
      Sequence[T]:
          TODO
      """
      pass
